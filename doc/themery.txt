*themery.txt*   Simple but powerful theme/colorscheme selector.

Author: zaldih <https://github.com/zaldih>

CONTENT             *themery-content*

Introduction	  	|themery|
Features	    		|themery-features|
Configuration			|themery-configuration|
Persistence	      |themery-persistence|
Usage             |themery-usage|

===============================================================================
INTRODUCTION        *themery*

Plugin written in Lua which allows you to quickly switch between your iset
formatoptions-=tnstalled themes through a menu.

The power of *Themery* is to be able to configure the theme menu at will, to
switch between themes quickly and to be able to execute instructions before
and/or after the colourscheme is applied. That way you can automate for example
the setting of some variables.

===============================================================================
FEATURES            *themery-features*

- Sort and name as you wish.
- Apply themes in real time.
- Persistently saves the theme (or not).
- Executes instructions before and/or after applying a theme.

===============================================================================
CONFIGURATION       *themery-configuration*

Configuration is simple and intuitive. It consists of 2 steps which are
described below:

1. Setup (Described here)
2. Persistence (Described in next section)

*Minimal config*

Let's get down to the nitty-gritty first. Anywhere in your configuration put
this:

  require("themary").setup({ themes = {"gruvbox", "ayu", ...}, -- Your list of installed colorschemes
  themeConfigFile = "~/.config/nvim/lua/settings/theme.lua", -- Described below
  livePreview = true, -- Apply theme while browsing. Default to true. })

Thats is all! When you open Themery you will see the above list.

*Customizing names*

Let's see how we can customise the list a bit...

  -- Set custom name to the list require("themary").setup({ themes = {{ name =
  "Day", colorscheme = "kanagawa-lotus", }, { name = "Night", colorscheme =
  "kanagawa-dragon", }}, [...] })

*Executing code on theme apply*

Let's go one step further.

Sometimes it is necessary to add additional instructions to make your favourite
theme work.

Themery includes a before and after option that will be executed respectively
before applying the theme.

For example, gruvbox uses a variable to switch between light and dark mode.

  -- Using before and after. require("themary").setup({ themes = {{ name =
  "Gruvbox dark", colorscheme = "gruvbox", before = [[ -- All this block will be
  executed before apply "set colorscheme" vim.opt.background = "dark" ]], }, {
  name = "Gruvbox light", colorscheme = "gruvbox", before = [[
  vim.opt.background = "light" ]], after = [[-- Same as before, but after if you
  need it]] }}, [...] })

That is, everything inside those variables will be executed as Lua code.

===============================================================================
PERSISTENCE        *themery-persistence*

Changes made to the plugin are written directly to your configuration file. This
way themes can be loaded even without the plugin being loaded.

To do this you have to put this code snippet wherever you see fit (i recommend
in a dedicated file). I will use `~/.config/nvim/lua/theme.lua`

  -- Themery block
  -- This block will be replaced by Themery.
  -- end themery block

Remember the themeConfigFile option? You will have to put the path to the file
where you have written the above. This way Themery will write the configuration
there.

*Using .vim config?*

Persistence also works fine if you don't have the configuration in a Lua file.
You can do this instead and it will still work.

  lua << EOF
  -- Themery block
  -- end themery block
  EOF

===============================================================================
USAGE               *themery-usage*

Open with `:Themery` and navigate and move between the results with `j` and `k`.
Press `<cr>` for apply theme and save. `q` or `<Esc>` for exit.

